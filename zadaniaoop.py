# -*- coding: utf-8 -*-
"""ZadaniaOOP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yNliXm7CaBT1Zpn94rAK2k348IH0Ep5B
"""

# Zadanie 1
class Student:
    def __init__(self, name, marks):
        self.name = name
        self.marks = marks

    def is_passed(self):
        average_marks = sum(self.marks) / len(self.marks)
        return average_marks > 50

# Przykładowe obiekty
student1 = Student("Patryk Siewniakinho", [60, 75, 80, 90])
student2 = Student("Daniel Ronaldinho Polanskyi", [40, 30, 45, 20])

result1 = student1.is_passed()
result2 = student2.is_passed()

print(f"{student1.name} - Czy zdał? {result1}")
print(f"{student2.name} - Czy zdał? {result2}")

# Zadanie 2
class Library:
    def __init__(self, city, street, zip_code, open_hours, phone):
        self.city = city
        self.street = street
        self.zip_code = zip_code
        self.open_hours = open_hours
        self.phone = phone

    def __str__(self):
        return f"Library in {self.city}, {self.street}, {self.zip_code}\n" \
               f"Open hours: {self.open_hours}\n" \
               f"Phone: {self.phone}"


class Employee:
    def __init__(self, first_name, last_name, hire_date, birth_date, city, street, zip_code, phone):
        self.first_name = first_name
        self.last_name = last_name
        self.hire_date = hire_date
        self.birth_date = birth_date
        self.city = city
        self.street = street
        self.zip_code = zip_code
        self.phone = phone

    def __str__(self):
        return f"Employee: {self.first_name} {self.last_name}\n" \
               f"Hire date: {self.hire_date}\n" \
               f"Birth date: {self.birth_date}\n" \
               f"Address: {self.city}, {self.street}, {self.zip_code}\n" \
               f"Phone: {self.phone}"


class Book:
    def __init__(self, library, publication_date, author_name, author_surname, number_of_pages):
        self.library = library
        self.publication_date = publication_date
        self.author_name = author_name
        self.author_surname = author_surname
        self.number_of_pages = number_of_pages

    def __str__(self):
        return f"Book by {self.author_name} {self.author_surname}\n" \
               f"Published on {self.publication_date}\n" \
               f"Number of pages: {self.number_of_pages}\n" \
               f"Available at:\n{self.library}"


class Order:
    def __init__(self, employee, student, books, order_date):
        self.employee = employee
        self.student = student
        self.books = books
        self.order_date = order_date

    def __str__(self):
        book_list = "\n".join([f"  - {book}" for book in self.books])
        return f"Order by {self.student}\n" \
               f"Processed by {self.employee}\n" \
               f"Order date: {self.order_date}\n" \
               f"Books:\n{book_list}"


# Tworzenie obiektów
library1 = Library("City1", "Street1", "12345", "9:00 AM - 5:00 PM", "123-456-789")
library2 = Library("City2", "Street2", "54321", "10:00 AM - 6:00 PM", "987-654-321")

employee1 = Employee("John", "Doe", "2022-01-01", "1990-05-15", "City1", "Street1", "12345", "111-222-333")
employee2 = Employee("Jane", "Smith", "2022-02-01", "1985-10-20", "City2", "Street2", "54321", "444-555-666")

book1 = Book(library1, "2021-01-01", "Author1", "Surname1", 200)
book2 = Book(library1, "2020-05-15", "Author2", "Surname2", 150)
book3 = Book(library2, "2019-12-01", "Author3", "Surname3", 300)
book4 = Book(library2, "2022-03-10", "Author4", "Surname4", 250)
book5 = Book(library2, "2022-05-20", "Author5", "Surname5", 180)

order1 = Order(employee1, "Student1", [book1, book3, book5], "2022-06-01")
order2 = Order(employee2, "Student2", [book2, book4], "2022-06-02")

# Wyświetlenie zamówień
print("Order 1:")
print(order1)
print("\nOrder 2:")
print(order2)

# Zadanie 3
class Property:
    def __init__(self, area, rooms, price, address):
        self.area = area
        self.rooms = rooms
        self.price = price
        self.address = address

    def __str__(self):
        return f"Property Details:\n" \
               f"Area: {self.area} sq. meters\n" \
               f"Number of Rooms: {self.rooms}\n" \
               f"Price: ${self.price}\n" \
               f"Address: {self.address}"


class House(Property):
    def __init__(self, area, rooms, price, address, plot):
        super().__init__(area, rooms, price, address)
        self.plot = plot

    def __str__(self):
        return f"House Details:\n" \
               f"{super().__str__()}\n" \
               f"Plot Size: {self.plot} sq. meters"


class Flat(Property):
    def __init__(self, area, rooms, price, address, floor):
        super().__init__(area, rooms, price, address)
        self.floor = floor

    def __str__(self):
        return f"Flat Details:\n" \
               f"{super().__str__()}\n" \
               f"Floor: {self.floor}"


# Tworzenie obiektów
house = House(area=150, rooms=5, price=300000, address="123 Main St", plot=500)
flat = Flat(area=80, rooms=3, price=150000, address="456 Oak St", floor=2)

# Wyświetlenie obiektów
print("House:")
print(house)
print("\nFlat:")
print(flat)